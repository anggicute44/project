from collections import deque

class Queue:
    def __init__(self):
        self.data = deque()

    def enqueue(self, data):
        self.data.append(data)

    def dequeue(self):
        if len(self.data) == 0:
            return None
        else:
            return self.data.popleft()

    def front(self):
        if len(self.data) == 0:
            return None
        else:
            return self.data[0]

    def get_length(self):
        return len(self.data)

    def write_all_data(self):
        print("DATA: ")
        for data in self.data:
            print(data)

# Fungsi get_min untuk mendapatkan nilai terkecil di queue tanpa mengubah isi queue
def get_min(queue):
    if queue.get_length() == 0:
        return None

    min_value = queue.front()
    temp_queue = Queue()

    # Cari nilai terkecil dan pindahkan data sementara ke temp_queue
    while queue.get_length() > 0:
        current = queue.dequeue()
        if current < min_value:
            min_value = current
        temp_queue.enqueue(current)

    # Kembalikan data dari temp_queue ke queue asli
    while temp_queue.get_length() > 0:
        queue.enqueue(temp_queue.dequeue())

    return min_value

# Fungsi pop untuk menghapus elemen pertama dari queue
def pop(queue):
    return queue.dequeue()

if __name__ == "__main__":
    q = Queue()
    for i in [10, 8, 5, 60, 1, 2, 3, 4, 100]:
        q.enqueue(i)
    print("==========")
    print("Data Awal")
    q.write_all_data()
    print("==========")
    print(f"Data terkecil = {get_min(q)}")
    print("==========")
    print()
    print("Pembuktian isi queue tidak berubah")
    print("==========")
    print("Data Akhir")
    q.write_all_data()
    print("==========")
    print()
    print("============")
    print("Percobaan Pop")
    print(f"pop - 1 = {pop(q)}")
    print(f"pop - 2 = {pop(q)}")
    print(f"pop - 3 = {pop(q)}")
    print("=============")
    print("Hasil Akhir: ")
    q.write_all_data()
    print("=============")
